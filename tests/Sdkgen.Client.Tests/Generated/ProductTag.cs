/**
 * ProductTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */


using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using RestSharp;
using Sdkgen.Client;
using Sdkgen.Client.Exception;

namespace Sdkgen.Client.Tests.Generated;

public class ProductTag : TagAbstract {
    public ProductTag(RestClient httpClient, Parser parser): base(httpClient, parser)
    {
    }


    /**
     * Returns a collection
     */
    public async Task<TestResponse> GetAll(int startIndex, int count, string search)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();
        queryParams.Add("startIndex", startIndex);
        queryParams.Add("count", count);
        queryParams.Add("search", search);

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Creates a new product
     */
    public async Task<TestResponse> Create(TestRequest payload)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        request.AddOrUpdateHeader("Content-Type", "application/json");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 500)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            throw new TestResponseException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Updates an existing product
     */
    public async Task<TestResponse> Update(int id, TestRequest payload)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("id", id);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything/:id", pathParams), Method.Put);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        request.AddOrUpdateHeader("Content-Type", "application/json");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Patches an existing product
     */
    public async Task<TestResponse> Patch(int id, TestRequest payload)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("id", id);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything/:id", pathParams), Method.Patch);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        request.AddOrUpdateHeader("Content-Type", "application/json");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Deletes an existing product
     */
    public async Task<TestResponse> Delete(int id)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("id", id);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything/:id", pathParams), Method.Delete);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Test binary content type
     */
    public async Task<TestResponse> Binary(byte[] payload)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything/binary", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddParameter("application/octet-stream", payload, ParameterType.RequestBody);

        request.AddOrUpdateHeader("Content-Type", "application/octet-stream");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 500)
        {
            var data = response.RawBytes;

            throw new BinaryException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Test form content type
     */
    public async Task<TestResponse> Form(System.Collections.Specialized.NameValueCollection payload)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything/form", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        var postValues = System.Web.HttpUtility.ParseQueryString("");
        postValues.Add(payload);
        request.AddParameter("application/x-www-form-urlencoded", postValues.ToString(), ParameterType.RequestBody);

        request.AddOrUpdateHeader("Content-Type", "application/x-www-form-urlencoded");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 500)
        {
            var data = System.Web.HttpUtility.ParseQueryString(response.Content);

            throw new FormException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Test json content type
     */
    public async Task<TestResponse> Json(object payload)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything/json", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        request.AddOrUpdateHeader("Content-Type", "application/json");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 500)
        {
            var data = System.Text.Json.JsonSerializer.Deserialize<object>(response.Content);

            throw new JsonException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Test json content type
     */
    public async Task<TestResponse> Multipart(Sdkgen.Client.Multipart payload)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything/multipart", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        foreach(KeyValuePair<string, Multipart.Part> part in payload.GetParts())
        {
            if (part.Value.Path != null)
            {
                request.AddFile(part.Key, part.Value.Path, part.Value.ContentType, part.Value.Options);
            }
            else if (part.Value.Bytes != null)
            {
                request.AddFile(part.Key, part.Value.Bytes, part.Value.FileName, part.Value.ContentType, part.Value.Options);
            }
            else if (part.Value.GetFile != null)
            {
                request.AddFile(part.Key, part.Value.GetFile, part.Value.FileName, part.Value.ContentType, part.Value.Options);
            }
        }


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 500)
        {
            // @TODO currently not possible, please create an issue at https://github.com/apioo/psx-api if needed
            var data = new Multipart();

            throw new MultipartException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Test text content type
     */
    public async Task<TestResponse> Text(string payload)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything/text", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddParameter("text/plain", payload, ParameterType.RequestBody);

        request.AddOrUpdateHeader("Content-Type", "text/plain");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 500)
        {
            var data = response.Content;

            throw new TextException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Test xml content type
     */
    public async Task<TestResponse> Xml(string payload)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/anything/xml", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddParameter("application/xml", payload, ParameterType.RequestBody);

        request.AddOrUpdateHeader("Content-Type", "application/xml");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<TestResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode == 500)
        {
            var data = response.Content;

            throw new XmlException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }


}
